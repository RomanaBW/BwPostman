pipeline {
    agent any

    stages {
        stage('Set variables') {
			steps {
				script
				{
					BWTC_VERSION = "0.9.0"
					JOOMLA_VERSION = "3.9.4"
					VAGRANT_DIR = "/vms-uni2/vagrant/infrastructure/farm1/J-Tester"
					BW_ARTIFACTS_BASE = "/repositories/artifacts/bwpostman"
					GIT_MESSAGE = "not specified"
					PROJECT_NAME = "j${JOOMLA_VERSION}_bwtc${BWTC_VERSION}"
				}
            }
        }

		stage('Create tester package') {
			steps {
				sh "ansible-playbook ${WORKSPACE}/build/playbooks/build_TC_package.yml --extra-vars 'project_base_dir=${WORKSPACE} version_number=${BWTC_VERSION} build=${BUILD_NUMBER} replace_vars=false'"
			}
		}

		stage('Create full package') {
			steps {
				sh "ansible-playbook ${WORKSPACE}/build/playbooks/build_TC_package.yml --extra-vars 'project_base_dir=${WORKSPACE} version_number=${BWTC_VERSION} build=${BUILD_NUMBER} replace_vars=true'"
			}
		}

		stage('Smoke') {
			steps {
				echo "Dummy Smoke"
//				sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-smoke-tests.yml"
//				sh "docker exec -t bwpm_enh_tester /data/do-tests.sh"
//				sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/push-smoke-testers.yml"
			}
			post {
				always {
					echo "Dummy Smoke ALWAYS"
//					sh "ansible-playbook ${WORKSPACE}/build/playbooks/pipeline2/stop-smoke-tests.yml"
				}
				failure {
					bwpmAcceptFailureContainer ("Smoke", "${PROJECT_NAME}")
				}
			}
		}

		stage('Run acceptance tests') {
			steps {
				echo "Dummy 1"
//				sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-acceptance-tests.yml --extra-vars 'test_suite=acceptTC'"
//				sh "docker exec -t bwpm_acceptTC_tester /data/do-tests.sh"
			}
			post {
				always {
					echo "Dummy 1 always"
//					sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/stop-acceptance-tests.yml --extra-vars 'test_suite=acceptTC'"
				}
				failure {
					bwpmAcceptFailureContainer ("Suite_TC", "${PROJECT_NAME}")
				}
			}
		}

		stage('Dev-Upload') {
			steps {
				dir("/repositories/artifacts/bwpostman/data") {
					fileOperations([
						fileCopyOperation(
							excludes: '',
						flattenFiles: false,
						includes: "plg_bwtimecontrol-${"${BWTC_VERSION}"}.${currentBuild.number}.zip",
						targetLocation: "${WORKSPACE}/tests")
				])
				}

				dir("/repositories/artifacts/bwpostman/data") {
					fileOperations([
						fileCopyOperation(
							excludes: '',
						flattenFiles: false,
						includes: "CHANGELOG",
						targetLocation: "${WORKSPACE}/tests")
				])
				}

				script {
					GIT_MESSAGE = sh(returnStdout: true, script: "git log -n 1 --pretty=%B")
				}

				echo "tests/plg_bwtimecontrol-${"${BWTC_VERSION}"}.${currentBuild.number}.zip"

				sshPublisher(
					publishers: [sshPublisherDesc(
					configName: 'Web Dev BwPostman',
					transfers: [sshTransfer(
					cleanRemote: false,
					excludes: '',
					execCommand: '',
					execTimeout: 120000,
					flatten: false,
					makeEmptyDirs: false,
					noDefaultExcludes: false,
					patternSeparator: '[, ]+',
					remoteDirectory: "${"${BWTC_VERSION}"}.${currentBuild.number}",
					remoteDirectorySDF: false,
					removePrefix: 'tests',
					sourceFiles: "tests/CHANGELOG, tests/plg_bwtimecontrol-${"${BWTC_VERSION}"}.${currentBuild.number}.zip"
			)],
				usePromotionTimestamp: false,
					useWorkspaceInPromotion: false,
					verbose: false
			)]
			)

				emailext(
					body: "<p>BwPostman Timecontrol build ${currentBuild.number} has passed smoke test, all acceptance tests and is uploaded to Boldt Webservice for manual testing purpose.</p><p>Last commit message: ${GIT_MESSAGE}</p>",
					subject:"BwPostman Timecontrol build ${currentBuild.number} successful",
					to: 'webmaster@boldt-webservice.de'
				)
//				@ToDo: NUR WENN ICH GANZ SICHER BIN!!!!!!!!
//				to: 'webmaster@boldt-webservice.de, k.klostermann@t-online.de'
			}
		}

//		stage('Push to github') {
//			steps {
//				echo "Push to github"
//			}
//		}

	}
}
