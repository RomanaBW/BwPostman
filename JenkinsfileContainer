#!groovy
pipeline {
    agent any

	options {
		disableConcurrentBuilds()
	}

	parameters {
        string(name: "BWPM_VERSION", defaultValue: "2.2.0", description: "The new/next version number of the project.")
        string(name: "JOOMLA_VERSION", defaultValue: "3.9.1", description: "Version of Joomla to test against")
        string(name: "BW_ARTIFACTS_BASE", defaultValue: "/repositories/artifacts/bwpostman")
		string(name: "GIT_MESSAGE", defaultValue: "not specified")
    }

    stages {
        stage('Prepare source files and log folders') {
            steps {
				script {
					PROJECT_NAME = "j${params.JOOMLA_VERSION}_bwpm${params.BWPM_VERSION}"
				}

				sh "ansible-playbook ./build/playbooks/prepare-container-files.yml --extra-vars 'project_base_dir=${WORKSPACE} project_name=${PROJECT_NAME}'"
            }
        }

		// @ToDo: deactivate, when tester works, to prevent later problems because of updates
		stage('Prepare infrastructure') {
			parallel {
				stage('build database container') {
					steps {
						sh "docker build -f ./build/docker/mysqldb/Dockerfile -t romana/mysql ./build/docker/mysqldb"
					}
				}
				stage('build webserver container') {
					steps {
						sh "docker build -f ./build/docker/apache/Dockerfile71 -t romana/apache_71 ./build/docker/apache"
					}
				}
				stage('build mailserver container') {
					steps {
						sh "docker build -f ./build/docker/os_base/Dockerfile -t romana/os_base ./build/docker/os_base"
						sh "docker build -f ./build/docker/os_postfix/Dockerfile -t romana/os-postfix ./build/docker/os_postfix"
					}
				}
				stage('build tester container') {
					steps {
						sh "docker build -f ./build/docker/os-tester/os-tester-base -t romana/os-tester-base ./build/docker/os-tester"
						sh "docker build -f ./build/docker/os-tester/os-tester-headless-video -t romana/os-tester-headless-video ./build/docker/os-tester"
						sh "docker build -f ./build/docker/os-tester/os-tester-php -t romana/os-tester-php ./build/docker/os-tester"
						sh "docker build -f ./build/docker/os-tester/os-tester-acceptance -t romana/os-tester-acceptance ./build/docker/os-tester"
						sh "docker build -f ./build/docker/os-chromium-tester/Dockerfile -t romana/os-chromium-tester ./build/docker/os-chromium-tester"
					}
				}
			}
		}

		stage('Create and run infrastructures') {
			parallel {
				stage('Infrastructure suite 1') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-infrastructure-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_1 workspace=${WORKSPACE}'"
						sh "ansible-playbook ./build/playbooks/adjust-joomla-configuration.yml --extra-vars 'suite_set=Suite_1 workspace=${WORKSPACE}'"
						sh "docker-compose -f build/docker/run-bwpm-1.yml --verbose -p ${PROJECT_NAME}-1 up -d"
					}
				}
				stage('Infrastructure suite 2') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-infrastructure-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_2 workspace=${WORKSPACE}'"
						sh "ansible-playbook ./build/playbooks/adjust-joomla-configuration.yml --extra-vars 'suite_set=Suite_2 workspace=${WORKSPACE}'"
						sh "docker-compose -f build/docker/run-bwpm-2.yml --verbose -p ${PROJECT_NAME}-2 up -d"
					}
				}
				stage('Infrastructure suite 3') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-infrastructure-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_3 workspace=${WORKSPACE}'"
						sh "ansible-playbook ./build/playbooks/adjust-joomla-configuration.yml --extra-vars 'suite_set=Suite_3 workspace=${WORKSPACE}'"
						sh "docker-compose -f build/docker/run-bwpm-3.yml --verbose -p ${PROJECT_NAME}-3 up -d"
					}
				}
			}
		}

		stage('Fill infrastructure containers') {
			parallel {
				stage('Fill suite 1') {
					steps {
						echo 'Fill database'
						sh "ansible-playbook ./build/playbooks/fill-infrastructure-db.yml --extra-vars 'suite_set=Suite_1 project_name=${PROJECT_NAME} workspace=${WORKSPACE}'"
					}
				}
				stage('Fill suite 2') {
					steps {
						echo 'Fill database'
						sh "ansible-playbook ./build/playbooks/fill-infrastructure-db.yml --extra-vars 'suite_set=Suite_2 project_name=${PROJECT_NAME} workspace=${WORKSPACE}'"
					}
				}
				stage('Fill suite 3') {
					steps {
						echo 'Fill database'
						sh "ansible-playbook ./build/playbooks/fill-infrastructure-db.yml --extra-vars 'suite_set=Suite_3 project_name=${PROJECT_NAME} workspace=${WORKSPACE}'"
					}
				}
			}
		}

		stage('Run testers') {
			parallel {
				stage('Tester 1') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-tester-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_1 workspace=${WORKSPACE}'"
					}
				}
				stage('Tester 2') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-tester-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_2 workspace=${WORKSPACE}'"
					}
				}
				stage('Tester 3') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-tester-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_3 workspace=${WORKSPACE}'"
					}
				}
			}
		}

		stage('Run first test suites') {
			parallel {
				stage('Run tester 1') {
					steps {
						sh "docker-compose -f build/docker/bwpm-tester-1.yml -p ${PROJECT_NAME}-1 up -d"
						sh "docker exec -it bwpm-tester-1 /bin/bash /data/do-container-tests.sh"
					}
				}
				stage('Run tester 2') {
					steps {
						echo "Dummy"
//						sh "docker-compose -f build/docker/bwpm-tester-2.yml -p ${PROJECT_NAME}-1 up"
					}
				}
				stage('Run tester 3') {
					steps {
						echo "Dummy"
//						sh "docker-compose -f build/docker/bwpm-tester-3.yml --verbose -p ${PROJECT_NAME}-1 up"
					}
				}
			}
		}

//		stage('smoke') {
//			parallel {
//				stage('Stop suite 1') {
//					steps {
//						echo 'Dummy '
//						sh "docker-compose -f build/docker/run-bwpm-1.yml -p ${PROJECT_NAME}-1 down"
//						//				bwpmAccept ("${STAGE_NAME}", params.SMOKE_IP, params.VERSION_NUMBER, params.JOOMLA_VERSION_1)
//					}
//				}
//				stage('Stop suite 2') {
//					steps {
//						echo 'Dummy '
//						sh "docker-compose -f build/docker/run-bwpm-2.yml -p ${PROJECT_NAME}-2 down"
//						//				bwpmAccept ("${STAGE_NAME}", params.SMOKE_IP, params.VERSION_NUMBER, params.JOOMLA_VERSION_1)
//					}
//				}
//				stage('Stop suite 3') {
//					steps {
//						echo 'Dummy '
//						sh "docker-compose -f build/docker/run-bwpm-3.yml -p ${PROJECT_NAME}-3 down"
//						//				bwpmAccept ("${STAGE_NAME}", params.SMOKE_IP, params.VERSION_NUMBER, params.JOOMLA_VERSION_1)
//					}
//				}
//			}
//		}
	}
}
