#!groovy
pipeline {
    agent any

	options {
		disableConcurrentBuilds()
	}

	parameters {
        string(name: "BWPM_VERSION_2", defaultValue: "220", description: "The new/next version number of the project.")
        string(name: "JOOMLA_VERSION_2", defaultValue: "391", description: "Version of Joomla to test against")
        string(name: "BW_ARTIFACTS_BASE", defaultValue: "/repositories/artifacts/bwpostman")
		string(name: "GIT_MESSAGE", defaultValue: "not specified")
    }

    stages {
        stage('Prepare source files and log folders') {
            steps {
				script {
					PROJECT_NAME = "j${params.JOOMLA_VERSION_2}_bwpm${params.BWPM_VERSION_2}"
				}

				echo "/vms/dockers/global_data/test_data/${PROJECT_NAME}/backups"
				dir("/vms/dockers/global_data/test_data/${PROJECT_NAME}/backups") {
					fileOperations([
						fileCopyOperation(
							excludes: '',
							flattenFiles: false,
							includes: "*.sql",
							targetLocation: "${WORKSPACE}/container_files/backups")
					])
				}

				echo "/vms/dockers/global_data/test_data/${PROJECT_NAME}/files"
//				dir("/vms/dockers/global_data/test_data/${PROJECT_NAME}/files") {
//					fileOperations([
//						fileCopyOperation(
//							excludes: '',
//							flattenFiles: false,
//							includes: "**/*.*",
//							targetLocation: "${WORKSPACE}/container_files/files-1")
//					])
//				}

				sh "mkdir -p ${WORKSPACE}/container_files/files-1"
				sh "mkdir -p ${WORKSPACE}/container_files/files-2"
				sh "mkdir -p ${WORKSPACE}/container_files/files-3"

				sh "sudo cp -rfpv /vms/dockers/global_data/test_data/${PROJECT_NAME}/files/* ${WORKSPACE}/container_files/files-1"

				sh "sudo cp -rfpv ${WORKSPACE}/src/* ${WORKSPACE}/container_files/files-1"
				sh "sudo chown -R romana ${WORKSPACE}/container_files/files-1"
				sh "sudo chgrp -R jenkins ${WORKSPACE}/container_files/files-1"
				sh "sudo chmod -R 0775 ${WORKSPACE}/container_files/files-1"

				sh "sudo cp -rfpv ${WORKSPACE}/container_files/files-1/* ${WORKSPACE}/container_files/files-2"
				sh "sudo cp -rfpv ${WORKSPACE}/container_files/files-1/* ${WORKSPACE}/container_files/files-3"

                echo 'ToDo: Remove not needed files'
                echo 'ToDo: ensure log folders are present'
            }
        }

		stage('Prepare infrastructure') {
			parallel {
				stage('build database container') {
					steps {
						sh "docker build -f ./build/docker/mysqldb/Dockerfile -t romana/mysql ./build/docker/mysqldb"
					}
				}
				stage('build webserver container') {
					steps {
						sh "docker build -f ./build/docker/apache/Dockerfile71 -t romana/apache_71 ./build/docker/apache"
					}
				}
				stage('build mailserver container') {
					steps {
						sh "docker build -f ./build/docker/os_base/Dockerfile -t romana/os_base ./build/docker/os_base"
						sh "docker build -f ./build/docker/os_postfix/Dockerfile -t romana/os-postfix ./build/docker/os_postfix"
					}
				}
			}
		}

		stage('Create and run infrastructures') {
			parallel {
				stage('Infrastructure suite 1') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-infrastructure-runner.yml --extra-vars 'suite_set=Suite_1 workspace=${WORKSPACE}'"
						sh "ansible-playbook ./build/playbooks/adjust-joomla-configuration.yml --extra-vars 'suite_set=Suite_1 workspace=${WORKSPACE}'"
						sh "docker-compose -f build/docker/run-bwpm-1.yml --verbose -p ${PROJECT_NAME}-1 up -d"
					}
				}
				stage('Infrastructure suite 2') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-infrastructure-runner.yml --extra-vars 'suite_set=Suite_2 workspace=${WORKSPACE}'"
						sh "ansible-playbook ./build/playbooks/adjust-joomla-configuration.yml --extra-vars 'suite_set=Suite_2 workspace=${WORKSPACE}'"
						sh "docker-compose -f build/docker/run-bwpm-2.yml --verbose -p ${PROJECT_NAME}-2 up -d"
					}
				}
				stage('Infrastructure suite 3') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-infrastructure-runner.yml --extra-vars 'suite_set=Suite_3 workspace=${WORKSPACE}'"
						sh "ansible-playbook ./build/playbooks/adjust-joomla-configuration.yml --extra-vars 'suite_set=Suite_3 workspace=${WORKSPACE}'"
						sh "docker-compose -f build/docker/run-bwpm-3.yml --verbose -p ${PROJECT_NAME}-3 up -d"
					}
				}
			}
		}

		stage('Fill infrastructure containers') {
			parallel {
				stage('Fill suite 1') {
					steps {
						echo 'Copy project files to webserver'
						echo 'Fill database'
						sh "ansible-playbook ./build/playbooks/fill-infrastructure-db.yml --extra-vars 'suite_set=Suite_1 project_name=${PROJECT_NAME} workspace=${WORKSPACE}'"
						echo 'Stop initial infrastructure'
						echo 'build image from webserver'
						echo 'build image from database server'
					}
				}
				stage('Fill suite 2') {
					steps {
						echo 'Copy project files to webserver'
						echo 'Fill database'
						sh "ansible-playbook ./build/playbooks/fill-infrastructure-db.yml --extra-vars 'suite_set=Suite_2 project_name=${PROJECT_NAME} workspace=${WORKSPACE}'"
						echo 'Stop initial infrastructure'
						echo 'build image from webserver'
						echo 'build image from database server'
					}
				}
				stage('Fill suite 3') {
					steps {
						echo 'Copy project files to webserver'
						echo 'Fill database'
						sh "ansible-playbook ./build/playbooks/fill-infrastructure-db.yml --extra-vars 'suite_set=Suite_3 project_name=${PROJECT_NAME} workspace=${WORKSPACE}'"
						echo 'Stop initial infrastructure'
						echo 'build image from webserver'
						echo 'build image from database server'
					}
				}
			}
		}

		stage('smoke') {
			parallel {
				stage('Stop suite 1') {
					steps {
						echo 'Dummy '
						sh "docker-compose -f build/docker/run-bwpm-1.yml -p ${PROJECT_NAME} down"
						//				bwpmAccept ("${STAGE_NAME}", params.SMOKE_IP, params.VERSION_NUMBER, params.JOOMLA_VERSION_1)
					}
				}
				stage('Stop suite 2') {
					steps {
						echo 'Dummy '
						sh "docker-compose -f build/docker/run-bwpm-2.yml -p ${PROJECT_NAME} down"
						//				bwpmAccept ("${STAGE_NAME}", params.SMOKE_IP, params.VERSION_NUMBER, params.JOOMLA_VERSION_1)
					}
				}
				stage('Stop suite 3') {
					steps {
						echo 'Dummy '
						sh "docker-compose -f build/docker/run-bwpm-3.yml -p ${PROJECT_NAME} down"
						//				bwpmAccept ("${STAGE_NAME}", params.SMOKE_IP, params.VERSION_NUMBER, params.JOOMLA_VERSION_1)
					}
				}
			}
		}
	}
}
