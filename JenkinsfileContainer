pipeline {
    agent any

    stages {
        stage('Set variables') {
			steps {
				script
				{
					BWPM_VERSION = "2.3.0"
					JOOMLA_VERSION = "3.9.4"
					VAGRANT_DIR = "/vms-uni2/vagrant/infrastructure/farm1/J-Tester"
					BW_ARTIFACTS_BASE = "/repositories/artifacts/bwpostman"
					GIT_MESSAGE = "not specified"
					PROJECT_NAME = "j${JOOMLA_VERSION}_bwpm${BWPM_VERSION}"
				}
            }
        }

//		stage('Create full package') {
//			steps {
//				sh "ansible-playbook ${WORKSPACE}/build/playbooks/build_package.yml --extra-vars 'project_base_dir=${WORKSPACE} version_number=${BWPM_VERSION} build=${BUILD_NUMBER} mb4_support=true replace_vars=true'"
//			}
//		}

		stage('Smoke') {
			steps {
				sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-smoke-tests.yml"
				sh "docker exec -it bwpm_enh_tester /data/do-tests.sh"
				sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/push-smoke-tests.yml"
			}
			post {
				always {
					sh "ansible-playbook ${WORKSPACE}/build/playbooks/pipeline2/stop-smoke-tests.yml"
				}
				failure {
					bwpmAcceptFailureContainer ("Smoke", "${PROJECT_NAME}")
				}
			}
		}

		stage('Run acceptance level 1') {
			parallel {
				stage('Suite 1') {
					steps {
						echo "Dummy 1"
//						sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-acceptance-test.yml --extra-vars 'test_suite=accept1'"
					}
					post {
						failure {
							sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/stop-acceptance-test.yml --extra-vars 'test_suite=accept1'"
							bwpmAcceptFailureContainer ("Suite_1", "${PROJECT_NAME}")
						}
					}
				}
				stage('Suite 2') {
					steps {
						echo "Dummy 2"
//						sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-acceptance-test.yml --extra-vars 'test_suite=accept2'"
					}
					post {
						failure {
							sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/stop-acceptance-test.yml --extra-vars 'test_suite=accept2'"
							bwpmAcceptFailureContainer ("Suite_1", "${PROJECT_NAME}")
						}
					}
				}
			}
		}

		stage('Run acceptance level 2') {
			parallel {
				stage('Suite 3') {
					steps {
						echo "Dummy 3"
//						sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-acceptance-test.yml --extra-vars 'test_suite=accept3'"
					}
					post {
						failure {
							sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/stop-acceptance-test.yml --extra-vars 'test_suite=accept3'"
							bwpmAcceptFailureContainer ("Suite_1", "${PROJECT_NAME}")
						}
					}
				}
				stage('Suite 4') {
					steps {
						echo "Dummy 4"
//						sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-acceptance-test.yml --extra-vars 'test_suite=accept4'"
					}
					post {
						failure {
							sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/stop-acceptance-test.yml --extra-vars 'test_suite=accept4'"
							bwpmAcceptFailureContainer ("Suite_1", "${PROJECT_NAME}")
						}
					}
				}
			}
		}

		stage('Run acceptance level 3') {
			parallel {
				stage('Suite 5') {
					steps {
						echo "Dummy 5"
//						sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-acceptance-test.yml --extra-vars 'test_suite=accept5'"
					}
					post {
						failure {
							sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/stop-acceptance-test.yml --extra-vars 'test_suite=accept5'"
							bwpmAcceptFailureContainer ("Suite_1", "${PROJECT_NAME}")
						}
					}
				}
				stage('Suite 6') {
					steps {
						echo "Dummy 6"
//						sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-acceptance-test.yml --extra-vars 'test_suite=accept6'"
					}
					post {
						failure {
							sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/stop-acceptance-test.yml --extra-vars 'test_suite=accept6'"
							bwpmAcceptFailureContainer ("Suite_1", "${PROJECT_NAME}")
						}
					}
				}
			}
		}

//		stage('Create tester package') {
//			steps {
//				sh "ansible-playbook ${WORKSPACE}/build/playbooks/build_package.yml --extra-vars 'project_base_dir=${WORKSPACE} version_number=${BWPM_VERSION} build=${BUILD_NUMBER} mb4_support=true replace_vars=false'"
//			}
//		}

		stage('Dev-Upload') {
			steps {
//				dir("/repositories/artifacts/bwpostman/data") {
//					fileOperations([
//						fileCopyOperation(
//							excludes: '',
//						flattenFiles: false,
//						includes: "pkg_bwpostman-${"${BWPM_VERSION}"}.${currentBuild.number}.zip",
//						targetLocation: "${WORKSPACE}/tests")
//				])
//				}

//				dir("/repositories/artifacts/bwpostman/data") {
//					fileOperations([
//						fileCopyOperation(
//							excludes: '',
//						flattenFiles: false,
//						includes: "CHANGELOG",
//						targetLocation: "${WORKSPACE}/tests")
//				])
//				}

				script {
					GIT_MESSAGE = sh(returnStdout: true, script: "git log -n 1 --pretty=%B")
				}

				echo "tests/pkg_bwpostman-${"${BWPM_VERSION}"}.${currentBuild.number}.zip"

//				sshPublisher(
//					publishers: [sshPublisherDesc(
//					configName: 'Web Dev BwPostman',
//					transfers: [sshTransfer(
//					cleanRemote: false,
//					excludes: '',
//					execCommand: '',
//					execTimeout: 120000,
//					flatten: false,
//					makeEmptyDirs: false,
//					noDefaultExcludes: false,
//					patternSeparator: '[, ]+',
//					remoteDirectory: "${"${BWPM_VERSION}"}.${currentBuild.number}",
//					remoteDirectorySDF: false,
//					removePrefix: 'tests',
//					sourceFiles: "tests/CHANGELOG, tests/pkg_bwpostman-${"${BWPM_VERSION}"}.${currentBuild.number}.zip"
//			)],
//				usePromotionTimestamp: false,
//					useWorkspaceInPromotion: false,
//					verbose: false
//			)]
//			)

//				emailext(
//					body: "<p>BwPostman build ${currentBuild.number} has passed smoke test, all acceptance tests and is uploaded to Boldt Webservice for manual testing purpose.</p><p>Last commit message: ${GIT_MESSAGE}</p>",
//					subject:"BwPostman build ${currentBuild.number} successful",
//					to: 'webmaster@boldt-webservice.de'
//				)
////				@ToDo: NUR WENN ICH GANZ SICHER BIN!!!!!!!!
//				to: 'webmaster@boldt-webservice.de, k.klostermann@t-online.de'
			}
		}

//		stage('Push to github') {
//			steps {
//				echo "Push to github"
//			}
//		}

	}
}
