#!groovy
pipeline {
	agent
	{
		label "master"
	}

	options {
		disableConcurrentBuilds()
	}

	parameters {
		string(name: "BWPM_VERSION", defaultValue: "2.2.0", description: "The new/next version number of the project.")
		string(name: "JOOMLA_VERSION", defaultValue: "3.9.1", description: "Version of Joomla to test against")
		string(name: "GIT_MESSAGE", defaultValue: "not specified")
		string(name: "Host_1", defaultValue: "master")
		string(name: "Host_2", defaultValue: "master")
		string(name: "Host_3", defaultValue: "master")
		string(name: "Host_4", defaultValue: "master")
		string(name: "Host_5", defaultValue: "master")
		string(name: "Host_6", defaultValue: "master")
		string(name: "Host_7", defaultValue: "master")
	}

	stages {
		stage('Prepare source files and log folders') {
			agent {
				label "server"
			}
			steps {
				script {
					PROJECT_NAME = "j${params.JOOMLA_VERSION}_bwpm${params.BWPM_VERSION}"
					JOOMLA_NAME = "j${params.JOOMLA_VERSION}"
					artifactPath = "/repositories/artifacts/bwpostman/j${JOOMLA_VERSION}_bwpm${BWPM_VERSION}"
					vault_file = "tester_vault"
					vault_path = "${WORKSPACE}/.vault/${vault_file}"
					docker_repo_string = "universe2:5000"
				}

//				sh "ansible-playbook ./build/playbooks/enable_vault.yml --extra-vars 'project_base_dir=${WORKSPACE} vault_file=${vault_file}'"
				sh "ansible-playbook ./build/playbooks/prepare-container-files.yml --extra-vars 'project_base_dir=${WORKSPACE} project_name=${PROJECT_NAME}  project_log_name=${PROJECT_NAME} joomla_name=${JOOMLA_NAME} vault_file=${vault_file} host=server'"
			}
		}

		stage('Run acceptance level 1') {
			parallel {
				stage('Suite 1') {
					agent {
						label "${params.Host_1}"
					}
					steps {
						bwpmAcceptContainer ("Suite_1", "${PROJECT_NAME}", "${PROJECT_NAME}", "1", "${vault_file}", "${params.Host_1}")
					}
					post {
						always {
							sh "docker-compose -f build/docker/run-bwpm-1.yml -p ${PROJECT_NAME}-1 down"
						}
						failure {
							bwpmAcceptFailureContainer ("Suite_1", "${PROJECT_NAME}")
						}
					}
				}
				stage('Suite 2') {
					agent {
						label "${params.Host_2}"
					}
					steps {
						bwpmAcceptContainer ("Suite_2", "${PROJECT_NAME}", "${PROJECT_NAME}", "2", "${vault_file}", "${params.Host_2}")
					}
					post {
						always {
							sh "docker-compose -f build/docker/run-bwpm-2.yml -p ${PROJECT_NAME}-2 down"
						}
						failure {
							bwpmAcceptFailureContainer ("Suite_2", "${PROJECT_NAME}")
						}
					}
				}
			}
		}

		stage('Notification level 1') {
			steps {
				emailext(
					body: "<p>First level of BwPostman build ${currentBuild.number} successfully finished.</p>",
					attachmentsPattern: "",
					subject:"First level of BwPostman build ${currentBuild.number} successfully finished",
					to: 'webmaster@boldt-webservice.de'
				)
			}
		}

		stage('Run acceptance level 2') {
			parallel {
				stage('Suite 3 + 4 + 5') {
					agent {
						label "${params.Host_3}"
					}
					steps {
						bwpmAcceptContainer ("Suite_3", "${PROJECT_NAME}", "${PROJECT_NAME}", "3", "${vault_file}", "${params.Host_3}")
						bwpmAcceptContainer ("Suite_4", "${PROJECT_NAME}", "${PROJECT_NAME}", "4", "${vault_file}", "${params.Host_3}")
						bwpmAcceptContainer ("Suite_5", "${PROJECT_NAME}", "${PROJECT_NAME}", "5", "${vault_file}", "${params.Host_3}")
					}
					post {
						always {
							sh "docker-compose -f build/docker/run-bwpm-3.yml -p ${PROJECT_NAME}-3 down"
							sh "docker-compose -f build/docker/run-bwpm-4.yml -p ${PROJECT_NAME}-4 down"
							sh "docker-compose -f build/docker/run-bwpm-5.yml -p ${PROJECT_NAME}-5 down"
						}
						failure {
							bwpmAcceptFailureContainer ("Suite_3", "${PROJECT_NAME}")
							bwpmAcceptFailureContainer ("Suite_4", "${PROJECT_NAME}")
							bwpmAcceptFailureContainer ("Suite_5", "${PROJECT_NAME}")
						}
					}
				}
				stage('Suite 6') {
					agent {
						label "${params.Host_6}"
					}
					steps {
						echo "Dummy"
//						bwpmAcceptContainer ("Suite_6", "${PROJECT_NAME}", "${PROJECT_NAME}", "6", "${vault_file}", "${params.Host_6}")
					}
//					post {
//						always {
//							sh "docker-compose -f build/docker/run-bwpm-6.yml -p ${PROJECT_NAME}-6 down"
//						}
//						failure {
//							bwpmAcceptFailureContainer ("Suite_6", "${PROJECT_NAME}")
//						}
//					}
				}
			}
		}

		stage('Notification level 2') {
			steps {
				emailext(
					body: "<p>Second level of BwPostman build ${currentBuild.number} successfully finished.</p>",
					attachmentsPattern: "",
					subject:"Second level of BwPostman build ${currentBuild.number} successfully finished",
					to: 'webmaster@boldt-webservice.de'
				)
			}
		}

		stage('Create installation package') {
			steps {
//				echo "Dummy"
				sh "ansible-playbook ${WORKSPACE}/build/playbooks/build_package.yml --extra-vars 'project_base_dir=${WORKSPACE} version_number=${params.BWPM_VERSION} build=${BUILD_NUMBER} mb4_support=true'"
			}
		}

		stage('Installation test') {
			agent {
				label "${params.Host_7}"
			}
			steps {
				echo "Dummy"
//				bwpmAcceptContainer ("Suite_7", "${JOOMLA_NAME}", "${PROJECT_NAME}", "7", "${vault_file}", "${params.Host_7}")
			}
//			post {
//				always {
//					echo "Dummy"
//					sh "docker-compose -f build/docker/run-bwpm-7.yml -p ${JOOMLA_NAME}-7 down"
//				}
//				failure {
//					bwpmAcceptFailureContainer ("Suite_7", "${JOOMLA_NAME}")
//				}
//			}
		}

//		stage('Dev-Upload') {
//			steps {
//				dir("/repositories/artifacts/bwpostman/data") {
//					fileOperations([
//						fileCopyOperation(
//							excludes: '',
//							flattenFiles: false,
//							includes: "pkg_bwpostman-${params.BWPM_VERSION}.${currentBuild.number}.zip",
//							targetLocation: "${WORKSPACE}/tests")
//					])
//				}
//
//				dir("/repositories/artifacts/bwpostman/data") {
//					fileOperations([
//						fileCopyOperation(
//							excludes: '',
//							flattenFiles: false,
//							includes: "CHANGELOG",
//							targetLocation: "${WORKSPACE}/tests")
//					])
//				}
//
//				script {
//					GIT_MESSAGE = sh(returnStdout: true, script: "git log -n 1 --pretty=%B")
//				}
//
//				echo "tests/pkg_bwpostman-${params.BWPM_VERSION}.${currentBuild.number}.zip"
//
//				sshPublisher(
//					publishers: [sshPublisherDesc(
//					configName: 'Web Dev BwPostman',
//					transfers: [sshTransfer(
//						cleanRemote: false,
//						excludes: '',
//						execCommand: '',
//						execTimeout: 120000,
//						flatten: false,
//						makeEmptyDirs: false,
//						noDefaultExcludes: false,
//						patternSeparator: '[, ]+',
//						remoteDirectory: "${params.BWPM_VERSION}.${currentBuild.number}",
//						remoteDirectorySDF: false,
//						removePrefix: 'tests',
//						sourceFiles: "tests/CHANGELOG, tests/pkg_bwpostman-${params.BWPM_VERSION}.${currentBuild.number}.zip"
//					)],
//					usePromotionTimestamp: false,
//						useWorkspaceInPromotion: false,
//						verbose: false
//					)]
//				)
//
//				emailext(
//					body: "<p>BwPostman build ${currentBuild.number} has passed all acceptance tests and is uploaded to Boldt Webservice for testing purpose.</p><p>Last commit message: ${GIT_MESSAGE}</p>",
//					subject:"BwPostman build ${currentBuild.number} successful",
//					to: 'webmaster@boldt-webservice.de, k.klostermann@t-online.de'
//				)
//				to: 'webmaster@boldt-webservice.de, k.klostermann@t-online.de'
//			}
//		}

//		stage('Push to github') {
//			steps {
//				echo "Push to github"
//			}
//		}

	}
}
