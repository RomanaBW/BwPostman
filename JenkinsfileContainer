pipeline {
    agent { label '!master' }

    stages {
        stage('Set variables') {
			steps {
				script
				{
					BWPM_VERSION = "2.4.0"
					JOOMLA_VERSION = "3.9.12"
//					BWPM_VERSION = "2.4.0"
//					JOOMLA_VERSION = "4.0.0a12"
					VAGRANT_DIR = "/vms-uni2/vagrant/infrastructure/farm1/J-Tester"
					BW_ARTIFACTS_BASE = "/repositories/artifacts/bwpostman"
					GIT_MESSAGE = "not specified"
					PROJECT_NAME = "j${JOOMLA_VERSION}_bwpm${BWPM_VERSION}"
					DO_RECORD_SMOKE = "false";
					DO_RECORD_1 = "false";
					DO_RECORD_2 = "false";
					DO_RECORD_3 = "false";
					DO_RECORD_4 = "true"; // has always to be true, because this suite uses codeception "friend", which does not work with "moving screens"
					DO_RECORD_5 = "false";
					DO_RECORD_6 = "false";
					DO_RECORD_7 = "false";
				}
			}
        }

//		stage('Create tester package') {
//			steps {
//				sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/build_package.yml --extra-vars 'project_base_dir=${WORKSPACE} version_number=${BWPM_VERSION} build=${BUILD_NUMBER} mb4_support=true replace_vars=false'"
//			}
//		}

//		stage('Create full package') {
//			steps {
//				sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/build_package.yml --extra-vars 'project_base_dir=${WORKSPACE} version_number=${BWPM_VERSION} build=${BUILD_NUMBER} mb4_support=true replace_vars=true'"
//			}
//		}

		stage('Smoke') {
			steps {
//				echo "Dummy Smoke"
				sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-smoke-tests.yml --extra-vars 'project_base_dir=${WORKSPACE} do_record=${DO_RECORD_SMOKE}'"
				sh "docker exec -t bwpm_enh_tester /data/do-tests.sh ${BWPM_VERSION}"
				sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/push-smoke-testers.yml"
			}
			post {
				always {
//					echo "Dummy Smoke ALWAYS"
					sh "ansible-playbook ${WORKSPACE}/build/playbooks/pipeline2/stop-smoke-tests.yml"
				}
				failure {
					bwpmAcceptFailureContainer ("Smoke", "${PROJECT_NAME}")
				}
			}
		}

//		stage('Run acceptance level 1') {
//			parallel {
//				stage('Suite 1') {
//					steps {
////						echo "Dummy 1"
//						sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-acceptance-tests.yml --extra-vars 'test_suite=accept1 do_record=${DO_RECORD_1}'"
//						sh "docker exec -t bwpm_accept1_tester /data/do-tests.sh ${BWPM_VERSION}"
//					}
//					post {
//						always {
////							echo "Dummy 1 always"
//							sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/stop-acceptance-tests.yml --extra-vars 'test_suite=accept1'"
//						}
//						failure {
//							bwpmAcceptFailureContainer ("Suite_1", "${PROJECT_NAME}")
//						}
//					}
//				}
//				stage('Suite 2') {
//					steps {
////						echo "Dummy 2"
//						sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-acceptance-tests.yml --extra-vars 'test_suite=accept2 do_record=${DO_RECORD_2}'"
//						sh "docker exec -t bwpm_accept2_tester /data/do-tests.sh ${BWPM_VERSION}"
//					}
//					post {
//						always {
////							echo "Dummy 2 always"
//							sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/stop-acceptance-tests.yml --extra-vars 'test_suite=accept2'"
//						}
//						failure {
//							bwpmAcceptFailureContainer ("Suite_2", "${PROJECT_NAME}")
//						}
//					}
//				}
//				stage('Suite 5') {
//					steps {
////						echo "Dummy 5"
//						sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-acceptance-tests.yml --extra-vars 'test_suite=accept5 do_record=${DO_RECORD_5}'"
//						sh "docker exec -t bwpm_accept5_tester /data/do-tests.sh ${BWPM_VERSION}"
//					}
//					post {
//						always {
////							echo "Dummy 5 always"
//							sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/stop-acceptance-tests.yml --extra-vars 'test_suite=accept5'"
//						}
//						failure {
//							bwpmAcceptFailureContainer ("Suite_5", "${PROJECT_NAME}")
//						}
//					}
//				}
//				stage('Suite 6') {
//					steps {
////						echo "Dummy 6"
//						sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-acceptance-tests.yml --extra-vars 'test_suite=accept6 do_record=${DO_RECORD_6}'"
//						sh "docker exec -t bwpm_accept6_tester /data/do-tests.sh ${BWPM_VERSION}"
//					}
//					post {
//						always {
////							echo "Dummy 6 always"
//							sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/stop-acceptance-tests.yml --extra-vars 'test_suite=accept6'"
//						}
//						failure {
//							bwpmAcceptFailureContainer ("Suite_6", "${PROJECT_NAME}")
//						}
//					}
//				}
//			}
//		}

		stage('Run acceptance level 2') {
			parallel {
				stage('Suite 3') {
					steps {
						echo "Dummy 3"
//						sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-acceptance-tests.yml --extra-vars 'test_suite=accept3 do_record=${DO_RECORD_3}'"
//						sh "docker exec -t bwpm_accept3_tester /data/do-tests.sh ${BWPM_VERSION}"
					}
					post {
						always {
							echo "Dummy 3 always"
//							sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/stop-acceptance-tests.yml --extra-vars 'test_suite=accept3'"
						}
						failure {
							bwpmAcceptFailureContainer ("Suite_3", "${PROJECT_NAME}")
						}
					}
				}
				stage('Suite 4') {
					steps {
//						echo "Dummy 4"
						sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/run-acceptance-tests.yml --extra-vars 'test_suite=accept4 do_record=${DO_RECORD_4}'"
						sh "docker exec -t bwpm_accept4_tester /data/do-tests.sh ${BWPM_VERSION}"
					}
					post {
						always {
//							echo "Dummy 4 always"
							sh "ansible-playbook -i ${WORKSPACE}/build/playbooks/pipeline2/inventory/hosts ${WORKSPACE}/build/playbooks/pipeline2/stop-acceptance-tests.yml --extra-vars 'test_suite=accept4'"
						}
						failure {
							bwpmAcceptFailureContainer ("Suite_4", "${PROJECT_NAME}")
						}
					}
				}
			}
		}

//		stage('Run acceptance level 3') {
//			parallel {
//			}
//		}

		stage('Dev-Upload') {
			steps {
				dir("/repositories/artifacts/bwpostman/data") {
					fileOperations([
						fileCopyOperation(
							excludes: '',
						flattenFiles: false,
						includes: "pkg_bwpostman-${"${BWPM_VERSION}"}.${currentBuild.number}.zip",
						targetLocation: "${WORKSPACE}/tests")
				])
				}

				dir("/repositories/artifacts/bwpostman/data") {
					fileOperations([
						fileCopyOperation(
							excludes: '',
						flattenFiles: false,
						includes: "CHANGELOG",
						targetLocation: "${WORKSPACE}/tests")
				])
				}

				script {
					GIT_MESSAGE = sh(returnStdout: true, script: "git log -n 1 --pretty=%B")
				}

				echo "tests/pkg_bwpostman-${"${BWPM_VERSION}"}.${currentBuild.number}.zip"

				sshPublisher(
					publishers: [sshPublisherDesc(
					configName: 'Web Dev BwPostman',
					transfers: [sshTransfer(
					cleanRemote: false,
					excludes: '',
					execCommand: '',
					execTimeout: 120000,
					flatten: false,
					makeEmptyDirs: false,
					noDefaultExcludes: false,
					patternSeparator: '[, ]+',
					remoteDirectory: "dev/${"${BWPM_VERSION}"}.${currentBuild.number}",
					remoteDirectorySDF: false,
					removePrefix: 'tests',
					sourceFiles: "tests/CHANGELOG, tests/pkg_bwpostman-${"${BWPM_VERSION}"}.${currentBuild.number}.zip"
			)],
				usePromotionTimestamp: false,
					useWorkspaceInPromotion: false,
					verbose: false
			)]
			)

				emailext(
					body: "<p>BwPostman build ${currentBuild.number} has passed smoke test, all acceptance tests and is uploaded to Boldt Webservice for manual testing purpose.</p><p>Last commit message: ${GIT_MESSAGE}</p>",
					subject:"BwPostman build ${currentBuild.number} successful",
					to: 'webmaster@boldt-webservice.de'
				)
//				@ToDo: NUR WENN ICH GANZ SICHER BIN!!!!!!!!
//				to: 'webmaster@boldt-webservice.de, k.klostermann@t-online.de'
			}
		}

//		stage('Push to github') {
//			steps {
//				echo "Push to github"
//			}
//		}

	}
}
