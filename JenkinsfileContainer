#!groovy
pipeline {
    agent any

	options {
		disableConcurrentBuilds()
	}

	parameters {
        string(name: "BWPM_VERSION", defaultValue: "2.2.0", description: "The new/next version number of the project.")
        string(name: "JOOMLA_VERSION", defaultValue: "3.9.1", description: "Version of Joomla to test against")
        string(name: "BW_ARTIFACTS_BASE", defaultValue: "/repositories/artifacts/bwpostman")
		string(name: "GIT_MESSAGE", defaultValue: "not specified")
    }

    stages {
        stage('Prepare source files and log folders') {
            steps {
				script {
					PROJECT_NAME = "j${params.JOOMLA_VERSION}_bwpm${params.BWPM_VERSION}"
					artifactPath = "/repositories/artifacts/bwpostman/j${JOOMLA_VERSION}_bwpm${BWPM_VERSION}"
				}

				sh "ansible-playbook ./build/playbooks/prepare-container-files.yml --extra-vars 'project_base_dir=${WORKSPACE} project_name=${PROJECT_NAME}'"
            }
        }

		// @ToDo: deactivate, when tester works, to prevent later problems because of updates
//		stage('Prepare infrastructure') {
//			parallel {
//				stage('build database container') {
//					steps {
//						sh "docker build -f ./build/docker/mysqldb/Dockerfile -t romana/mysql ./build/docker/mysqldb"
//					}
//				}
//				stage('build webserver container') {
//					steps {
//						sh "docker build -f ./build/docker/apache/Dockerfile71 -t romana/apache_71 ./build/docker/apache"
//					}
//				}
//				stage('build mailserver container') {
//					steps {
//						sh "docker build -f ./build/docker/os_base/Dockerfile -t romana/os_base ./build/docker/os_base"
//						sh "docker build -f ./build/docker/os_postfix/Dockerfile -t romana/os-postfix ./build/docker/os_postfix"
//					}
//				}
//				stage('build tester container') {
//					steps {
//						sh "docker build -f ./build/docker/os-tester/os-tester-base -t romana/os-tester-base ./build/docker/os-tester"
//						sh "docker build -f ./build/docker/os-tester/os-tester-headless-video -t romana/os-tester-headless-video ./build/docker/os-tester"
//						sh "docker build -f ./build/docker/os-tester/os-tester-php -t romana/os-tester-php ./build/docker/os-tester"
//						sh "docker build -f ./build/docker/os-tester/os-tester-acceptance -t romana/os-tester-acceptance ./build/docker/os-tester"
//						sh "docker build -f ./build/docker/os-chromium-tester/Dockerfile -t romana/os-chromium-tester ./build/docker/os-chromium-tester"
//					}
//				}
//			}
//		}

		stage('Create and run infrastructures level 1') {
			parallel {
				stage('Infrastructure suite 1') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-infrastructure-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_1 workspace=${WORKSPACE}'"
						sh "ansible-playbook ./build/playbooks/adjust-joomla-configuration.yml --extra-vars 'suite_set=Suite_1 workspace=${WORKSPACE}'"
						sh "docker-compose -f build/docker/run-bwpm-1.yml --verbose -p ${PROJECT_NAME}-1 up -d"
						sleep 10
					}
				}
				stage('Infrastructure suite 2') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-infrastructure-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_2 workspace=${WORKSPACE}'"
						sh "ansible-playbook ./build/playbooks/adjust-joomla-configuration.yml --extra-vars 'suite_set=Suite_2 workspace=${WORKSPACE}'"
						sh "docker-compose -f build/docker/run-bwpm-2.yml -p ${PROJECT_NAME}-2 up -d"
						sleep 10
					}
				}
				stage('Infrastructure suite 3') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-infrastructure-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_3 workspace=${WORKSPACE}'"
						sh "ansible-playbook ./build/playbooks/adjust-joomla-configuration.yml --extra-vars 'suite_set=Suite_3 workspace=${WORKSPACE}'"
						sh "docker-compose -f build/docker/run-bwpm-3.yml -p ${PROJECT_NAME}-3 up -d"
						sleep 10
					}
				}
			}
		}

		stage('Create testers level 1') {
			parallel {
				stage('Tester 1') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-tester-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_1 workspace=${WORKSPACE}'"
					}
				}
				stage('Tester 2') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-tester-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_2 workspace=${WORKSPACE}'"
					}
				}
				stage('Tester 3') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-tester-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_3 workspace=${WORKSPACE}'"
					}
				}
			}
		}

		stage('Run test suites level 1') {
			parallel {
				stage('Suite_1') {
					steps {
						echo "Dummy"
//						sh "docker-compose -f build/docker/bwpm-tester-1.yml -p ${PROJECT_NAME}-1 run --rm bwpm-tester-1 sh -c '/data/do-container-tests.sh'"
					}
					post {
						always {
							sh "docker-compose -f build/docker/run-bwpm-1.yml -p ${PROJECT_NAME}-1 down"
						}
						failure {
							emailext(
								body: "<p>BwPostman build ${currentBuild.number} failed at ${STAGE_NAME},</p><br /><p>the video is at: <a href='file://${artifactPath}/${STAGE_NAME}/videos/${STAGE_NAME}.mp4'>${STAGE_NAME}.mp4</a></p>",
								attachmentsPattern: "repo_data/${STAGE_NAME}/logs/*.png",
								subject:"BwPostman build ${currentBuild.number} failed at ${STAGE_NAME}",
								to: 'webmaster@boldt-webservice.de'
							)
						}
					}
				}
				stage('Suite_2') {
					steps {
						echo "Dummy"
//						sh "docker-compose -f build/docker/bwpm-tester-2.yml -p ${PROJECT_NAME}-2 run --rm bwpm-tester-2 sh -c '/data/do-container-tests.sh'"
					}
					post {
						always {
							sh "docker-compose -f build/docker/run-bwpm-2.yml -p ${PROJECT_NAME}-2 down"
						}
						failure {
							emailext(
								body: "<p>BwPostman build failed ${currentBuild.number} at ${STAGE_NAME},</p><br /><p>the video is at: <a href='file://${artifactPath}/${STAGE_NAME}/videos/${STAGE_NAME}.mp4'>${STAGE_NAME}.mp4</a></p>",
								attachmentsPattern: "repo_data/${STAGE_NAME}/logs/*.png",
								subject:"BwPostman build ${currentBuild.number} failed at ${STAGE_NAME}",
								to: 'webmaster@boldt-webservice.de'
							)
						}
					}
				}
				stage('Suite_3') {
					steps {
						echo "Dummy"
//						sh "docker-compose -f build/docker/bwpm-tester-3.yml -p ${PROJECT_NAME}-3 run --rm bwpm-tester-3 sh -c '/data/do-container-tests.sh'"
					}
					post {
						always {
							sh "docker-compose -f build/docker/run-bwpm-3.yml -p ${PROJECT_NAME}-3 down"
						}
						failure {
						echo "../../../../..${artifactPath}/${STAGE_NAME}/logs/*.png"
							emailext(
								body: "<p>BwPostman build failed ${currentBuild.number} at ${STAGE_NAME},</p><br /><p>the video is at: <a href='file://${artifactPath}/${STAGE_NAME}/videos/${STAGE_NAME}.mp4'>${STAGE_NAME}.mp4</a></p>",
								attachmentsPattern: "repo_data/${STAGE_NAME}/logs/*.png",
								subject:"BwPostman build ${currentBuild.number} failed at ${STAGE_NAME}",
								to: 'webmaster@boldt-webservice.de'
							)
						}
					}
				}
			}
		}

		stage('Notification level 1') {
			steps {
				emailext(
					body: "<p>First level of BwPostman build ${currentBuild.number} successfully finished.</p>",
					attachmentsPattern: "repo_data/${STAGE_NAME}/logs/*.png",
					subject:"First level of BwPostman build ${currentBuild.number} successfully finished",
					to: 'webmaster@boldt-webservice.de'
				)
			}
		}

		stage('Create and run infrastructures level 2') {
			parallel {
				stage('Infrastructure suite 4') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-infrastructure-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_4 workspace=${WORKSPACE}'"
						sh "ansible-playbook ./build/playbooks/adjust-joomla-configuration.yml --extra-vars 'suite_set=Suite_4 workspace=${WORKSPACE}'"
						sh "docker-compose -f build/docker/run-bwpm-1.yml --verbose -p ${PROJECT_NAME}-4 up -d"
						sleep 10
					}
				}
				stage('Infrastructure suite 5') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-infrastructure-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_5 workspace=${WORKSPACE}'"
						sh "ansible-playbook ./build/playbooks/adjust-joomla-configuration.yml --extra-vars 'suite_set=Suite_5 workspace=${WORKSPACE}'"
						sh "docker-compose -f build/docker/run-bwpm-2.yml -p ${PROJECT_NAME}-5 up -d"
						sleep 10
					}
				}
				stage('Infrastructure suite 6') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-infrastructure-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_6 workspace=${WORKSPACE}'"
						sh "ansible-playbook ./build/playbooks/adjust-joomla-configuration.yml --extra-vars 'suite_set=Suite_6 workspace=${WORKSPACE}'"
						sh "docker-compose -f build/docker/run-bwpm-3.yml -p ${PROJECT_NAME}-6 up -d"
						sleep 10
					}
				}
			}
		}

		stage('Create testers level 2') {
			parallel {
				stage('Tester 4') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-tester-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_4 workspace=${WORKSPACE}'"
					}
				}
				stage('Tester 5') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-tester-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_5 workspace=${WORKSPACE}'"
					}
				}
				stage('Tester 6') {
					steps {
						sh "ansible-playbook ./build/playbooks/create-tester-runner.yml --extra-vars 'project_name=${PROJECT_NAME} suite_set=Suite_6 workspace=${WORKSPACE}'"
					}
				}
			}
		}

		stage('Run test suites level 2') {
			parallel {
				stage('Suite_4') {
					steps {
						echo "Dummy"
//						sh "docker-compose -f build/docker/bwpm-tester-4.yml -p ${PROJECT_NAME}-4 run --rm bwpm-tester-4 sh -c '/data/do-container-tests.sh'"
					}
					post {
						always {
							sh "docker-compose -f build/docker/run-bwpm-4.yml -p ${PROJECT_NAME}-4 down"
						}
						failure {
							emailext(
								body: "<p>BwPostman build ${currentBuild.number} failed at ${STAGE_NAME},</p><br /><p>the video is at: <a href='file://${artifactPath}/${STAGE_NAME}/videos/${STAGE_NAME}.mp4'>${STAGE_NAME}.mp4</a></p>",
								attachmentsPattern: "repo_data/${STAGE_NAME}/logs/*.png",
								subject:"BwPostman build ${currentBuild.number} failed at ${STAGE_NAME}",
								to: 'webmaster@boldt-webservice.de'
							)
						}
					}
				}
				stage('Suite_5') {
					steps {
						echo "Dummy"
//						sh "docker-compose -f build/docker/bwpm-tester-5.yml -p ${PROJECT_NAME}-5 run --rm bwpm-tester-5 sh -c '/data/do-container-tests.sh'"
					}
					post {
						always {
							sh "docker-compose -f build/docker/run-bwpm-5.yml -p ${PROJECT_NAME}-5 down"
						}
						failure {
							emailext(
								body: "<p>BwPostman build failed ${currentBuild.number} at ${STAGE_NAME},</p><br /><p>the video is at: <a href='file://${artifactPath}/${STAGE_NAME}/videos/${STAGE_NAME}.mp4'>${STAGE_NAME}.mp4</a></p>",
								attachmentsPattern: "repo_data/${STAGE_NAME}/logs/*.png",
								subject:"BwPostman build ${currentBuild.number} failed at ${STAGE_NAME}",
								to: 'webmaster@boldt-webservice.de'
							)
						}
					}
				}
				stage('Suite_6') {
					steps {
						echo "Dummy"
//						sh "docker-compose -f build/docker/bwpm-tester-6.yml -p ${PROJECT_NAME}-6 run --rm bwpm-tester-6 sh -c '/data/do-container-tests.sh'"
					}
					post {
						always {
							sh "docker-compose -f build/docker/run-bwpm-6.yml -p ${PROJECT_NAME}-6 down"
						}
						failure {
						echo "../../../../..${artifactPath}/${STAGE_NAME}/logs/*.png"
							emailext(
								body: "<p>BwPostman build failed ${currentBuild.number} at ${STAGE_NAME},</p><br /><p>the video is at: <a href='file://${artifactPath}/${STAGE_NAME}/videos/${STAGE_NAME}.mp4'>${STAGE_NAME}.mp4</a></p>",
								attachmentsPattern: "repo_data/${STAGE_NAME}/logs/*.png",
								subject:"BwPostman build ${currentBuild.number} failed at ${STAGE_NAME}",
								to: 'webmaster@boldt-webservice.de'
							)
						}
					}
				}
			}
		}

		stage('Notification level 2') {
			steps {
				emailext(
					body: "<p>Second level of BwPostman build ${currentBuild.number} successfully finished.</p>",
					attachmentsPattern: "repo_data/${STAGE_NAME}/logs/*.png",
					subject:"Second level of BwPostman build ${currentBuild.number} successfully finished",
					to: 'webmaster@boldt-webservice.de'
				)
			}
		}

		stage('Create intallation package') {
			steps {
//				echo "Dummy"
				echo 'Create installation package'
				sh "ansible-playbook ${WORKSPACE}/build/playbooks/build_package.yml --extra-vars 'project_base_dir=${WORKSPACE} version_number=${params.BWPM_VERSION} build=${BUILD_NUMBER} mb4_support=true'"
			}
		}

		stage('installation') {
			steps {
				echo "Dummy"
//				bwpmAccept ("${STAGE_NAME}", params.SMOKE_IP, params.BWPM_VERSION, params.JOOMLA_VERSION)
			}
//			post {
//				always {
//					bwpmAcceptPostStepAlways ("${STAGE_NAME}")
//				}
//				failure {
//					bwpmAcceptFailure ("${STAGE_NAME}", params.BWPM_VERSION, params.JOOMLA_VERSION)
//				}
//			}
		}

		stage('Dev-Upload') {
			steps {
				dir("/repositories/artifacts/bwpostman/data") {
					fileOperations([
						fileCopyOperation(
							excludes: '',
							flattenFiles: false,
							includes: "pkg_bwpostman-${params.BWPM_VERSION}.${currentBuild.number}.zip",
							targetLocation: "${WORKSPACE}/tests")
					])
				}

				dir("/repositories/artifacts/bwpostman/data") {
					fileOperations([
						fileCopyOperation(
							excludes: '',
							flattenFiles: false,
							includes: "CHANGELOG",
							targetLocation: "${WORKSPACE}/tests")
					])
				}

				script {
					GIT_MESSAGE = sh(returnStdout: true, script: "git log -n 1 --pretty=%B")
				}

				echo "tests/pkg_bwpostman-${params.BWPM_VERSION}.${currentBuild.number}.zip"

				sshPublisher(
					publishers: [sshPublisherDesc(
					configName: 'Web Dev BwPostman',
					transfers: [sshTransfer(
						cleanRemote: false,
						excludes: '',
						execCommand: '',
						execTimeout: 120000,
						flatten: false,
						makeEmptyDirs: false,
						noDefaultExcludes: false,
						patternSeparator: '[, ]+',
						remoteDirectory: "${params.BWPM_VERSION}.${currentBuild.number}",
						remoteDirectorySDF: false,
						removePrefix: 'tests',
						sourceFiles: "tests/CHANGELOG, tests/pkg_bwpostman-${params.BWPM_VERSION}.${currentBuild.number}.zip"
					)],
					usePromotionTimestamp: false,
						useWorkspaceInPromotion: false,
						verbose: false
					)]
				)

				emailext(
					body: "<p>BwPostman build ${currentBuild.number} has passed all acceptance tests and is uploaded to Boldt Webservice for testing purpose.</p><p>Last commit message: ${GIT_MESSAGE}</p>",
					subject:"BwPostman build ${currentBuild.number} successful",
					to: 'webmaster@boldt-webservice.de, k.klostermann@t-online.de'
				)
//				to: 'webmaster@boldt-webservice.de, k.klostermann@t-online.de'

			}
		}

	}
}
